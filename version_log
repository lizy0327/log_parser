2022/04/26 第一个版本，只是简单的通过字典数字下标嵌套的方式获获取数据（凌晨）
2022/04/26 把第一版代码提交到github上
2022/04/27
参考文档：https://www.jianshu.com/p/cf6fa10045a6
1.第2个版本，可以实现通过for循环及xml的attrib和text方法获取数据，只是简单的数据展示，没有解决各种不同数据解析和存放问题
2.第3个版本，解决了数据分析和存放问题，但是对于EventData对象里的子节点的tag全部为Data，目前使用的时比较笨的方法，逐条对比每条数据
3.第4个版本，在上一个版本上优化了对EventData里Data tag的处理，可以做到大多数的字段可以通过for循环自动处理。
4.第5个版本，保存文件时增加自动识别文件冲突，并生成新的文件
5.遗留问题：没有解决不同类型的日志之间字段的差异，有可能会造成部分字段没有。
2022/05/02
第6个版本，在一个函数中把所有类型的事件都解析成字典类型的数据，解决方法也很简单就是在判断里EventData数据循环时再增加一个IpAddress判断就可以了。
因为Event事件每次只循环一条数据且首先判断的是有差异的EventData子节点，所以可以保证不会出现冲突问题。
遗留问题：
如何把相同类型的事件，合并到一个list中。并根据不同的事件类型写入不同的csv文件
2022/05/05
第7个版本，解决了根据事件的EventName进行分类(https://www.cnpython.com/qa/275163)
遗留问题：
优化脚本易用性问题：生成的csv结果，缺省情况下保存在xml文件同级别目录的（新创建的）子目录下
2022/05/08
第8个版本，增加了process_xml方法，可以根据传入不同的目录或文件参数，分别进行处理，并把处理的csv文件按照xml文件名称分别保存到对应的目录中
遗留问题：
1.在使用传入系统参数时，总是会进入到only xml file这个判断条件中去
2.异常打印报告的文件路径的斜杠不统一，有反斜杠也有正斜杠
3.如果更准确的判断是否为xml格式的文件还是xml文件损坏
第9个版本：
1.解决了异常打印路径错误的问题
2.优化了异常处理判断，可以区分文件是否为xml格式以及是否和ln存储日志格式匹配等2种情况
3.至于上一个版本遗留的接收系统参数时“总是会进入到only xml file这个判断条件中去”这个文件，在今天优化完成后没有再出现，本着程序能跑千万不要优化的原
则，就这样吧，不是挺好吗？
遗留任务：
1.优化help提示
2.执行编译成可执行文件
3.加密或license
2022/05/13
第10个版本：
1.优化了help提示
2.解决了“执行编译成可执行文件”
3.增加了license功能
遗留任务：
1.对可执行文件进行加密
2.优化工程逻辑，比如把xml_parser.py里的检查license方法移除，使用import的方式从check_license.py导入的方法，但是更改后需要考虑pyinstall
打包时是否能够把多个py文件都包含进去的问题
3.对工程增加main.py文件，用pyinstall打包时以main.py文件作为入口（只是计划，不知道行不行得通）
4.优化mac获取函数

